<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/test/java/net/tylerwade/cryptoapp/auth/AppUserServiceTests.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/test/java/net/tylerwade/cryptoapp/auth/AppUserServiceTests.java" />
              <option name="originalContent" value="package net.tylerwade.cryptoapp.auth;&#10;&#10;public class AppUserServiceTests {&#10;}" />
              <option name="updatedContent" value="package net.tylerwade.cryptoapp.auth;&#10;&#10;import net.tylerwade.cryptoapp.auth.dto.ChangePasswordRequest;&#10;import net.tylerwade.cryptoapp.auth.dto.LoginRequest;&#10;import net.tylerwade.cryptoapp.auth.dto.RegisterRequest;&#10;import net.tylerwade.cryptoapp.auth.forgotpassword.ResetPasswordCode;&#10;import net.tylerwade.cryptoapp.auth.forgotpassword.ResetPasswordCodeDao;&#10;import net.tylerwade.cryptoapp.common.exception.HttpRequestException;&#10;import net.tylerwade.cryptoapp.config.CryptoAppProperties;&#10;import net.tylerwade.cryptoapp.mail.MailService;&#10;import net.tylerwade.cryptoapp.mail.SendMailRequest;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.*;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;public class AppUserServiceTests {&#10;&#10;    @Mock private AppUserDao appUserDao;&#10;    @Mock private PasswordEncoder passwordEncoder;&#10;    @Mock private ResetPasswordCodeDao resetPasswordCodeDao;&#10;    @Mock private MailService mailService;&#10;    @Mock private CryptoAppProperties cryptoAppProperties;&#10;&#10;    @InjectMocks private AppUserService appUserService;&#10;&#10;    private final String serviceEmail = &quot;noreply@example.com&quot;;&#10;&#10;    @BeforeEach&#10;    void setup() {&#10;        when(cryptoAppProperties.getServiceEmail()).thenReturn(serviceEmail);&#10;    }&#10;&#10;    // register&#10;    @Test&#10;    void register_createsUser_whenEmailNotExists() {&#10;        RegisterRequest req = new RegisterRequest(&quot;John&quot;, &quot;Doe&quot;, &quot;john@example.com&quot;, &quot;password123&quot;, &quot;password123&quot;);&#10;        when(appUserDao.existsByUsernameIgnoreCase(req.username())).thenReturn(false);&#10;        when(passwordEncoder.encode(req.password())).thenReturn(&quot;encoded&quot;);&#10;&#10;        ArgumentCaptor&lt;AppUser&gt; saveCaptor = ArgumentCaptor.forClass(AppUser.class);&#10;        when(appUserDao.save(any(AppUser.class))).thenAnswer(inv -&gt; {&#10;            AppUser u = inv.getArgument(0);&#10;            u.setId(&quot;user-1&quot;);&#10;            return u;&#10;        });&#10;&#10;        AppUser created = appUserService.register(req);&#10;&#10;        verify(appUserDao).save(saveCaptor.capture());&#10;        AppUser toSave = saveCaptor.getValue();&#10;        assertEquals(req.username(), toSave.getUsername());&#10;        assertEquals(&quot;encoded&quot;, toSave.getPassword());&#10;        assertEquals(&quot;John&quot;, toSave.getFirstName());&#10;        assertEquals(&quot;Doe&quot;, toSave.getLastName());&#10;&#10;        assertEquals(&quot;user-1&quot;, created.getId());&#10;    }&#10;&#10;    @Test&#10;    void register_throwsConflict_whenEmailExists() {&#10;        RegisterRequest req = new RegisterRequest(&quot;John&quot;, &quot;Doe&quot;, &quot;john@example.com&quot;, &quot;password123&quot;, &quot;password123&quot;);&#10;        when(appUserDao.existsByUsernameIgnoreCase(req.username())).thenReturn(true);&#10;&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.register(req));&#10;        assertEquals(HttpStatus.CONFLICT, ex.getHttpStatus());&#10;    }&#10;&#10;    // login&#10;    @Test&#10;    void login_returnsUser_whenCredentialsValid() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).password(&quot;enc&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;john@example.com&quot;)).thenReturn(Optional.of(user));&#10;        when(passwordEncoder.matches(&quot;raw&quot;, &quot;enc&quot;)).thenReturn(true);&#10;&#10;        LoginRequest req = new LoginRequest(&quot;john@example.com&quot;, &quot;raw&quot;);&#10;        AppUser result = appUserService.login(req);&#10;        assertSame(user, result);&#10;    }&#10;&#10;    @Test&#10;    void login_throwsUnauthorized_whenPasswordInvalid() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).password(&quot;enc&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;john@example.com&quot;)).thenReturn(Optional.of(user));&#10;        when(passwordEncoder.matches(&quot;bad&quot;, &quot;enc&quot;)).thenReturn(false);&#10;&#10;        LoginRequest req = new LoginRequest(&quot;john@example.com&quot;, &quot;bad&quot;);&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.login(req));&#10;        assertEquals(HttpStatus.UNAUTHORIZED, ex.getHttpStatus());&#10;    }&#10;&#10;    // loadUserByUsername&#10;    @Test&#10;    void loadUserByUsername_returnsDetails_whenFound() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;j@example.com&quot;).password(&quot;p&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;j@example.com&quot;)).thenReturn(Optional.of(user));&#10;&#10;        UserDetails details = appUserService.loadUserByUsername(&quot;j@example.com&quot;);&#10;        assertSame(user, details);&#10;    }&#10;&#10;    @Test&#10;    void loadUserByUsername_throws_whenNotFound() {&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;missing@example.com&quot;)).thenReturn(Optional.empty());&#10;        assertThrows(UsernameNotFoundException.class, () -&gt; appUserService.loadUserByUsername(&quot;missing@example.com&quot;));&#10;    }&#10;&#10;    // changePassword&#10;    @Test&#10;    void changePassword_updatesPassword_andSendsEmail_whenValid() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).password(&quot;old&quot;).firstName(&quot;John&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;john@example.com&quot;)).thenReturn(Optional.of(user));&#10;&#10;        ResetPasswordCode code = ResetPasswordCode.builder()&#10;                .user(user)&#10;                .code(&quot;ABCDEF&quot;)&#10;                .expiresAt(LocalDateTime.now().plusMinutes(10))&#10;                .build();&#10;        when(resetPasswordCodeDao.findById(&quot;u1&quot;)).thenReturn(Optional.of(code));&#10;        when(passwordEncoder.encode(&quot;newpassword&quot;)).thenReturn(&quot;new-enc&quot;);&#10;&#10;        ChangePasswordRequest req = new ChangePasswordRequest(&quot;ABCDEF&quot;, &quot;john@example.com&quot;, &quot;newpassword&quot;, &quot;newpassword&quot;);&#10;        appUserService.changePassword(req);&#10;&#10;        verify(appUserDao).save(argThat(u -&gt; &quot;new-enc&quot;.equals(u.getPassword())));&#10;        verify(resetPasswordCodeDao).delete(code);&#10;        verify(mailService).sendEmail(argThat(m -&gt;&#10;                m.getTo().equals(&quot;john@example.com&quot;) &amp;&amp;&#10;                m.getFrom().equals(serviceEmail) &amp;&amp;&#10;                m.getSubject().equals(&quot;Password Changed Successfully&quot;)&#10;        ));&#10;    }&#10;&#10;    @Test&#10;    void changePassword_throws_whenUsernameInvalid() {&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;missing@example.com&quot;)).thenReturn(Optional.empty());&#10;        ChangePasswordRequest req = new ChangePasswordRequest(&quot;CODE&quot;, &quot;missing@example.com&quot;, &quot;newpassword&quot;, &quot;newpassword&quot;);&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.changePassword(req));&#10;        assertEquals(HttpStatus.BAD_REQUEST, ex.getHttpStatus());&#10;    }&#10;&#10;    @Test&#10;    void changePassword_throws_whenCodeNotFoundOrMismatch() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;john@example.com&quot;)).thenReturn(Optional.of(user));&#10;        ResetPasswordCode code = ResetPasswordCode.builder()&#10;                .user(user)&#10;                .code(&quot;ZZZZZZ&quot;)&#10;                .expiresAt(LocalDateTime.now().plusMinutes(10))&#10;                .build();&#10;        when(resetPasswordCodeDao.findById(&quot;u1&quot;)).thenReturn(Optional.of(code));&#10;&#10;        ChangePasswordRequest req = new ChangePasswordRequest(&quot;ABCDEF&quot;, &quot;john@example.com&quot;, &quot;newpassword&quot;, &quot;newpassword&quot;);&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.changePassword(req));&#10;        assertEquals(HttpStatus.BAD_REQUEST, ex.getHttpStatus());&#10;    }&#10;&#10;    @Test&#10;    void changePassword_throws_whenCodeExpired() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;john@example.com&quot;)).thenReturn(Optional.of(user));&#10;        ResetPasswordCode code = ResetPasswordCode.builder()&#10;                .user(user)&#10;                .code(&quot;ABCDEF&quot;)&#10;                .expiresAt(LocalDateTime.now().minusMinutes(20))&#10;                .build();&#10;        when(resetPasswordCodeDao.findById(&quot;u1&quot;)).thenReturn(Optional.of(code));&#10;&#10;        ChangePasswordRequest req = new ChangePasswordRequest(&quot;ABCDEF&quot;, &quot;john@example.com&quot;, &quot;newpassword&quot;, &quot;newpassword&quot;);&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.changePassword(req));&#10;        assertEquals(HttpStatus.BAD_REQUEST, ex.getHttpStatus());&#10;    }&#10;&#10;    @Test&#10;    void changePassword_throws_whenNewPasswordsDoNotMatch() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;john@example.com&quot;)).thenReturn(Optional.of(user));&#10;        ResetPasswordCode code = ResetPasswordCode.builder()&#10;                .user(user)&#10;                .code(&quot;ABCDEF&quot;)&#10;                .expiresAt(LocalDateTime.now().plusMinutes(10))&#10;                .build();&#10;        when(resetPasswordCodeDao.findById(&quot;u1&quot;)).thenReturn(Optional.of(code));&#10;&#10;        ChangePasswordRequest req = new ChangePasswordRequest(&quot;ABCDEF&quot;, &quot;john@example.com&quot;, &quot;newpassword&quot;, &quot;different&quot;);&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.changePassword(req));&#10;        assertEquals(HttpStatus.BAD_REQUEST, ex.getHttpStatus());&#10;    }&#10;&#10;    // forgotPassword&#10;    @Test&#10;    void forgotPassword_sendsEmail_whenUserExists() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).firstName(&quot;John&quot;).build();&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;john@example.com&quot;)).thenReturn(Optional.of(user));&#10;        when(resetPasswordCodeDao.findById(&quot;u1&quot;)).thenReturn(Optional.empty());&#10;        when(resetPasswordCodeDao.save(any(ResetPasswordCode.class))).thenAnswer(inv -&gt; inv.getArgument(0));&#10;&#10;        appUserService.forgotPassword(&quot;john@example.com&quot;);&#10;&#10;        verify(resetPasswordCodeDao).save(argThat(c -&gt; c.getUser() == user &amp;&amp; c.getCode() != null &amp;&amp; c.getExpiresAt() != null));&#10;        verify(mailService).sendEmail(argThat(m -&gt;&#10;                m.getTo().equals(&quot;john@example.com&quot;) &amp;&amp;&#10;                m.getFrom().equals(serviceEmail) &amp;&amp;&#10;                m.getSubject().equals(&quot;Password Reset Code&quot;) &amp;&amp;&#10;                m.getText() != null &amp;&amp; m.getText().contains(&quot;John&quot;)&#10;        ));&#10;    }&#10;&#10;    @Test&#10;    void forgotPassword_doesNothing_whenUserMissing() {&#10;        when(appUserDao.findByUsernameIgnoreCase(&quot;missing@example.com&quot;)).thenReturn(Optional.empty());&#10;        appUserService.forgotPassword(&quot;missing@example.com&quot;);&#10;        verify(mailService, never()).sendEmail(any(SendMailRequest.class));&#10;        verify(resetPasswordCodeDao, never()).save(any());&#10;    }&#10;&#10;    // findById&#10;    @Test&#10;    void findById_returnsUser_whenExists() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).build();&#10;        when(appUserDao.findById(&quot;u1&quot;)).thenReturn(Optional.of(user));&#10;        AppUser result = appUserService.findById(&quot;u1&quot;);&#10;        assertSame(user, result);&#10;    }&#10;&#10;    @Test&#10;    void findById_throwsNotFound_whenMissing() {&#10;        when(appUserDao.findById(&quot;none&quot;)).thenReturn(Optional.empty());&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.findById(&quot;none&quot;));&#10;        assertEquals(HttpStatus.NOT_FOUND, ex.getHttpStatus());&#10;    }&#10;&#10;    // deleteAccount&#10;    @Test&#10;    void deleteAccount_deletes_whenUserExists() {&#10;        AppUser user = AppUser.builder().id(&quot;u1&quot;).username(&quot;john@example.com&quot;).build();&#10;        when(appUserDao.existsById(&quot;u1&quot;)).thenReturn(true);&#10;        appUserService.deleteAccount(user);&#10;        verify(appUserDao).delete(user);&#10;    }&#10;&#10;    @Test&#10;    void deleteAccount_throwsBadRequest_whenUserNull() {&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.deleteAccount(null));&#10;        assertEquals(HttpStatus.BAD_REQUEST, ex.getHttpStatus());&#10;    }&#10;&#10;    @Test&#10;    void deleteAccount_throwsNotFound_whenMissing() {&#10;        AppUser user = AppUser.builder().id(&quot;u2&quot;).build();&#10;        when(appUserDao.existsById(&quot;u2&quot;)).thenReturn(false);&#10;        HttpRequestException ex = assertThrows(HttpRequestException.class, () -&gt; appUserService.deleteAccount(user));&#10;        assertEquals(HttpStatus.NOT_FOUND, ex.getHttpStatus());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>